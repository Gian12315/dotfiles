#+TITLE: Mi configuración de DOOM EMACS

* Datos del usuario
Aquí ingreso lo que vendría siendo mi nombre completo y mi correo.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Giancarlo Espitia Ramirez"
      user-mail-address "giancarlo.cytro@gmail.com")

#+END_SRC

* UI
** Font

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode' use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.

#+BEGIN_SRC emacs-lisp
    (setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 14)
          doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font" :size 15))
#+END_SRC

** Theme
Usualmente nord
#+BEGIN_SRC emacs-lisp
    (setq doom-theme 'doom-dracula)
    (setq! doom-dracula-brighter-modeline t
       doom-dracula-colorful-headers t
       doom-dracula-padded-modeline t)
#+END_SRC

** Line numbers
Relativos
#+BEGIN_SRC emacs-lisp
    (setq display-line-numbers-type 'relative)
#+END_SRC

* ORG

Configuración de cosas mi ORG, que basicamente organizara lo poco organizada que es mi vida cuando me meta de pleno a usarlo
#+BEGIN_SRC emacs-lisp

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documentos/org/"
      org-agenda-files '("~/Documentos/org/agenda/"))

;; (setq org-latex-packages-alist
;;       '("AUTO" "babel" t ("pdflatex")))
;; (add-to-list 'org-latex-packages-alist
;;              '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
#+END_SRC

* Customización de paquetes
Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with
`require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

#+BEGIN_SRC emacs-lisp

(use-package! latex
  :config
  (setq auctex-latexmk-inherit-TeX-PDF-mode nil))

(use-package! langtool
  :config
  (setq langtool-default-language "es"))

(use-package! reftex
  :config
  (add-to-list 'reftex-bibliography-commands "setupbibtex\[database=")
  (setq reftex-label-alist '(("\\pagereference[*]" ?a nil "~\\at[%s]" nil nil))))

(use-package! tex
  :config
  (add-to-list 'TeX-command-list
	       '("LMXT" "context %s" TeX-run-command 't)))

(add-hook 'ConTeXt-mode-hook
          (lambda ()
            (add-to-list 'reftex-cite-format '(99 . "\\cite[%t]"))
            (setq TeX-command-default "LMXT")))

(use-package! highlight-indent-guides
  :init
  (setq highlight-indent-guides-method 'bitmap))

(setq ispell-dictionary "spanish")

;; (set-file-template! context-mode)
#+END_SRC
